# vibespace MCP Experience Project Metadata\n# This file contains project-specific configuration and metadata\n# for advanced development tooling and project management.\n\n[project]\nname = \"vibespace-mcp-go\"\nversion = \"1.0.0\"\ndescription = \"MCP (Model Context Protocol) experience for managing vibes and worlds with real-time NATS streaming\"\nlicense = \"MIT\"\nrepository = \"https://github.com/bmorphism/vibespace-mcp-go\"\nhomepage = \"https://github.com/bmorphism/vibespace-mcp-go\"\ndocumentation = \"https://github.com/bmorphism/vibespace-mcp-go/blob/main/README.md\"\nkeywords = [\"mcp\", \"model-context-protocol\", \"go\", \"nats\", \"streaming\", \"vibes\", \"worlds\"]\n\n[project.authors]\nprimary = \"Team Topos <team@topos.com>\"\ncontributors = []\n\n[project.maintenance]\nstatus = \"actively-developed\"\nlast_updated = \"2025-01-24\"\nnext_review = \"2025-03-24\"\n\n[golang]\nversion = \"1.24\"\nmodule = \"github.com/bmorphism/vibespace-mcp-go\"\ntoolchain = \"go1.24.0\"\n\n[golang.build]\nflags = [\"-ldflags=-s -w\"]\nplatforms = [\"linux/amd64\", \"linux/arm64\", \"darwin/amd64\", \"darwin/arm64\", \"windows/amd64\"]\ncgo_enabled = false\n\n[golang.testing]\ncoverage_threshold = 80.0\nrace_detection = true\nshort_test_pattern = \"-short\"\nbenchmark_pattern = \"Benchmark.*\"\n\n[golang.linting]\ntool = \"golangci-lint\"\nversion = \"v1.64.8\"\nconfig = \".golangci.yml\"\ntimeout = \"10m\"\n\n[dependencies]\n# Core dependencies\nmcp_go = { version = \"v0.32.0\", repository = \"github.com/mark3labs/mcp-go\" }\nnats = { version = \"v1.43.0\", repository = \"github.com/nats-io/nats.go\" }\ntestify = { version = \"v1.10.0\", repository = \"github.com/stretchr/testify\" }\n\n# Development dependencies\ngolangci_lint = { version = \"v1.64.8\", repository = \"github.com/golangci/golangci-lint\" }\ngocov = { version = \"v1.2.1\", repository = \"github.com/axw/gocov\" }\ngocov_html = { version = \"v1.4.0\", repository = \"github.com/matm/gocov-html\" }\n\n[ci]\nprimary_branch = \"main\"\ndevelop_branch = \"develop\"\ngo_versions = [\"1.23\", \"1.24\"]\nplatforms = [\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"]\n\n[ci.github_actions]\nworkflows = [\".github/workflows/go.yml\", \".github/workflows/go-test.yml\", \".github/workflows/release.yml\"]\nauto_merge = false\nrequired_checks = [\"test\", \"lint\", \"security\", \"build\"]\n\n[ci.quality_gates]\ncoverage_threshold = 80.0\nsecurity_scan = true\nlint_required = true\ndocumentation_check = true\n\n[release]\nstrategy = \"semantic-versioning\"\nauto_changelog = true\nrelease_notes = true\nassets = [\n    \"dist/*.tar.gz\",\n    \"dist/*.zip\",\n    \"dist/checksums*.txt\"\n]\n\n[release.docker]\nregistry = \"ghcr.io\"\nimage_name = \"bmorphism/vibespace-mcp-go\"\nplatforms = [\"linux/amd64\", \"linux/arm64\"]\ntags = [\"latest\", \"v{version}\", \"v{major}.{minor}\"]\n\n[development]\ncode_style = \"uber-go-style-guide\"\ncommit_format = \"conventional-commits\"\nbranch_protection = true\ncode_review_required = true\n\n[development.tools]\nrequired = [\n    \"golangci-lint@latest\",\n    \"govulncheck@latest\",\n    \"goimports@latest\",\n    \"staticcheck@latest\"\n]\noptional = [\n    \"air@latest\",\n    \"delve@latest\",\n    \"gopls@latest\"\n]\n\n[development.pre_commit_hooks]\nenabled = true\nhooks = [\"fmt\", \"vet\", \"lint\", \"test-short\"]\n\n[testing]\nunit_tests = \"./...\"\nintegration_tests = \"./tests/...\"\nbenchmarks = \"./...\"\n\n[testing.patterns]\nunit = \"Test.*\"\nintegration = \"TestIntegration.*\"\nbenchmark = \"Benchmark.*\"\nexample = \"Example.*\"\n\n[testing.coverage]\nmode = \"atomic\"\nthreshold = 80.0\nformat = \"html\"\noutput = \"coverage.html\"\n\n[documentation]\nformat = \"markdown\"\napi_docs = \"openapi\"\nchangelog = \"CHANGELOG.md\"\ncontributing = \"CONTRIBUTING.md\"\n\n[documentation.generation]\ntool = \"godoc\"\noutput = \"docs/\"\ninclude_internal = false\ninclude_examples = true\n\n[security]\nvulnerability_scanner = \"govulncheck\"\nstatic_analyzer = \"gosec\"\ndependency_scanner = \"github-advisory-database\"\n\n[security.policies]\nupdate_policy = \"patch-immediately\"\nscan_frequency = \"daily\"\nreport_format = \"sarif\"\n\n[deployment]\nstrategy = \"containerized\"\nplatform = \"kubernetes\"\nregistry = \"ghcr.io\"\n\n[deployment.environments]\ndevelopment = { url = \"https://dev.vibespace.topos.com\", branch = \"develop\" }\nstaging = { url = \"https://staging.vibespace.topos.com\", branch = \"main\" }\nproduction = { url = \"https://vibespace.topos.com\", branch = \"main\", protected = true }\n\n[monitoring]\nmetrics = \"prometheus\"\nlogging = \"structured-json\"\ntracing = \"opentelemetry\"\n\n[monitoring.alerts]\ncoverage_drop = { threshold = 75.0, severity = \"warning\" }\nbuild_failure = { threshold = 1, severity = \"critical\" }\nsecurity_vulnerability = { threshold = 1, severity = \"critical\" }\n\n[project.structure]\nsource_dirs = [\"cmd\", \"models\", \"repository\", \"rpcmethods\", \"streaming\"]\ntest_dirs = [\"tests\"]\ndoc_dirs = [\"docs\", \"examples\"]\nconfig_dirs = [\".github\", \".topos\"]\n\n[project.patterns]\n# 2-3-5-7 pattern for test organization\ntest_sizes = [2, 3, 5, 7]\n# 2-3-5-1069 pattern for comprehensive coverage\ncoverage_levels = [2, 3, 5, 1069]\n\n[project.standards]\ncoding_style = \"uber-go\"\nerror_handling = \"wrapped-errors\"\nconcurrency = \"context-aware\"\ntesting = \"table-driven\"\ndocumentation = \"godoc-compliant\"\n\n[project.quality]\ncode_review = \"required\"\nautomated_testing = \"comprehensive\"\nsecurity_scanning = \"continuous\"\nperformance_monitoring = \"enabled\"\n\n[project.future]\nroadmap = [\n    \"Enhanced MCP v2.0 support\",\n    \"Distributed streaming architecture\",\n    \"Advanced vibe analytics\",\n    \"Real-time collaboration features\"\n]\n\n[metadata]\ncreated = \"2024-03-21\"\nlast_modified = \"2025-01-24\"\nformat_version = \"1.0\"\nschema = \"topos-project-v1\"
