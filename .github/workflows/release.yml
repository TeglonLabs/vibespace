name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Pre-release validation
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run all tests
      run: |
        go test -race -coverprofile=coverage.out ./...
        
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage $COVERAGE% is below minimum 80% for release"
          exit 1
        fi

    - name: Run security scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Validate version
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

  # Build release binaries
  build:
    name: Build Release Binaries
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_short=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        EXT=""
        if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
        
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        COMMIT_SHA=${GITHUB_SHA::8}
        
        go build \
          -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }} -X main.buildTime=$BUILD_TIME -X main.commit=$COMMIT_SHA" \
          -o dist/vibespace-mcp-${{ matrix.goos }}-${{ matrix.goarch }}$EXT \
          ./cmd/server

    - name: Create archive
      run: |
        cd dist
        BINARY=vibespace-mcp-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY="${BINARY}.exe"
        fi
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${BINARY%.exe}.zip" "$BINARY"
        else
          tar -czf "${BINARY}.tar.gz" "$BINARY"
        fi

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums-${{ matrix.goos }}-${{ matrix.goarch }}.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 7

  # Create GitHub release
  release:
    name: Create Release
    needs: [validate, build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        
        # Save changelog to file for release body
        cat > release_notes.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        ## Installation
        
        Download the appropriate binary for your platform from the assets below.
        
        ### Linux/macOS
        \`\`\`bash
        # Download and extract
        curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vibespace-mcp-linux-amd64.tar.gz | tar -xz
        
        # Make executable and move to PATH
        chmod +x vibespace-mcp-linux-amd64
        sudo mv vibespace-mcp-linux-amd64 /usr/local/bin/vibespace-mcp
        \`\`\`
        
        ### Windows
        Download the \`.zip\` file and extract it to your desired location.
        
        ## Verification
        
        All binaries are signed and can be verified using the provided checksums.
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/checksums-*.txt
        token: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image
  docker:
    name: Build and Push Docker Image
    needs: [validate, build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_short=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
